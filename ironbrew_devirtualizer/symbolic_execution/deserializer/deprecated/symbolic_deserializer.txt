// .cpp
/*
#pragma once

#include "./ast/ir/abstract_visitor_pattern.hpp"
#include "./ast/ir/node.hpp"
#include "symbolic_deserializer.hpp"

#include <stack>


namespace deobf::ironbrew_devirtualizer::symbolic_execution::deserializer {
	using namespace ast;

	// todo this implementation might be vulnrable to stack smashing attacks from another obfuscators or incorrect output?

	// todo implement builder design pattern so we wont have to serialize the proto like that?

	struct deserializer_visitor final : ir::abstract_visitor_pattern { // process chunks via symbolic execution
		explicit deserializer_visitor(symoblic_deserializer& const object) :
			object(object),
			current_chunk(new vm_arch::proto)
		{ }

		auto result() {
			return std::move(current_chunk);
		}

		bool accept(ir::statement::local_declaration* statement) override {
			if (statement->body.size() == 1) {
				const auto body = statement->body.at(0)->to_string();
				if (body == "get_32_bits()") {
					const auto bit_result = object.deserializer_helper_object->get_32_bits();
					execution_track.push(bit_result);
				}
				else if (body == "get_8_bits()") {
					const auto bit_result = object.deserializer_helper_object->get_8_bits();
					execution_track.push(bit_result);
				}

				if (!execution_track.empty()) {
					const auto name = statement->names.at(0)->to_string();
					//std::cout << name << std::endl;
					if (const auto result = concerte_values.find(name); result != concerte_values.cend())
						concerte_values.erase(result);

					concerte_values.try_emplace(name, execution_track.top());
				}
			}

			return false;
		}

		bool accept(ir::statement::variable_assign* assign) override {
			if (assign->expressions.size() == 1 && assign->variables.size() == 1) {
				// constant loading

				// couldve made constant a variant in other scope and assign but im lazy to check if the variant holds a value
				const auto value = assign->expressions.at(0)->to_string();
				if (value == "get_string()") {
					const auto constant = object.deserializer_helper_object->get_string();
					current_chunk->constants.emplace_back(std::make_unique<vm_arch::constant>(constant));
				}
				else if (value == "get_float()") {
					const auto constant = object.deserializer_helper_object->get_float();
					current_chunk->constants.emplace_back(std::make_unique<vm_arch::constant>(constant));
				}
				else if (value == "( get_8_bits() ~= 0 )") {
					const auto constant = (object.deserializer_helper_object->get_8_bits() != 0);
					current_chunk->constants.emplace_back(std::make_unique<vm_arch::constant>(constant));
				}

				// load lineinfo
				else if (value == "get_32_bits()") { // && assign->variables.at(0)->as<ir::expression::variable>()->suffixes.size() == 1) {
					current_chunk->lineinfo.push_back(object.deserializer_helper_object->get_32_bits());
				}
				// prototype loading
				else if (value == "bytecode_deserializer()") {
					current_chunk->protos.push_back(std::move(object.deserialize()));
				}

				// process parameter count
				const auto suffix = assign->variables.at(0)->find_first_of<ir::expression::variable_suffix>();
				if (suffix.has_value() && suffix.value().get().to_string() == "[3]" && value == "get_8_bits()") {
					const auto num_params = (object.deserializer_helper_object->get_8_bits());
					current_chunk->num_params = num_params;
				}
			}

			return false;
		}

		bool accept(ir::expression::binary_expression* expression) override {
			//std::cout << expression->to_string() << std::endl;
			if (auto result = concerte_values.find(expression->left->to_string()); result != concerte_values.cend()) {
				if (auto numeral_right = expression->right->as<ir::expression::numeral_literal>()) {
					return (numeral_right->value == result->second);
				}
			}

			auto get_bits_call = expression->find_first_of<ir::expression::function_call>();
			if (get_bits_call.has_value() && expression->right->to_string() == "0" && get_bits_call.value().get().name.value()->to_string() == "get_bits") {
				// should we make a builder function for this?
				const auto instruction_flag = execution_track.top();
				if (object.deserializer_helper_object->get_bits(instruction_flag, 1, 1) == 0) {
					// load instructions (not metamorphic)
					const auto instruction_bitfield_1 = object.deserializer_helper_object->get_bits(instruction_flag, 2, 3);
					const auto instruction_bitfield_2 = object.deserializer_helper_object->get_bits(instruction_flag, 4, 6);

					const auto virtual_opcode = object.deserializer_helper_object->get_16_bits();
					const auto parameter_a = object.deserializer_helper_object->get_16_bits();

					//vm_arch::instruction test = { 1, 2 };
					auto new_instruction = std::make_unique<vm_arch::instruction>(virtual_opcode, parameter_a);
					
					switch (instruction_bitfield_1) {
						case 0: {
							new_instruction->b = object.deserializer_helper_object->get_16_bits();
							new_instruction->c = object.deserializer_helper_object->get_16_bits();
							break;
						}
						case 1: {
							new_instruction->b = object.deserializer_helper_object->get_32_bits();
							break;
						}
						case 2: {
							new_instruction->b = object.deserializer_helper_object->get_32_bits() - std::numeric_limits<unsigned short>::max();
							break;
						}
						case 3: {
							new_instruction->b = object.deserializer_helper_object->get_32_bits() - std::numeric_limits<unsigned short>::max();
							new_instruction->c = object.deserializer_helper_object->get_16_bits();
							break;
						}
					}

					// todo populate sbx for constants?

	
					current_chunk->instructions.push_back(std::move(new_instruction));
				}
			}

			return false;
		}

		bool accept(ir::statement::if_statement* statement) override { // todo update visitor itself?
			auto root_condition = static_cast<ir::expression::binary_expression*>(statement->condition.get());
			if (accept(root_condition)) {
				statement->body->accept(this);
			}

			for (auto& [condition, body] : statement->else_if_statements) {
				auto binary_condition = static_cast<ir::expression::binary_expression*>(condition.get());
				if (accept(binary_condition)) {
					body->accept(this);
				}
			}

			return false;
		}

		bool accept(ir::statement::for_step* statement) override {
			auto lim_step = std::size_t{ 0 };

			if (statement->end->to_string() == "get_32_bits()")
				lim_step = object.deserializer_helper_object->get_32_bits();
			else if (!execution_track.empty())
				lim_step = execution_track.top();

			std::cout << "lim:" << lim_step << std::endl;

			for (auto i = 0ul; i < lim_step; ++i) {  // todo add limit step safety (recursion call depth, loop depth etc)
				statement->body->accept(this); // enter execution paths
			}

			return false;
		}
	private:
		std::unordered_map<std::string, std::size_t> concerte_values; // mapping for resolved concerte values
		std::stack<std::size_t> execution_track; // keeps tracks of concerte values like assigns etc
		std::unique_ptr<vm_arch::proto> current_chunk; // current write chunk
		symoblic_deserializer& const object; // holds a reference to deserializer object
	};

	std::unique_ptr<vm_arch::proto> symoblic_deserializer::deserialize() {
		deserializer_visitor optimizer(*this);
		/*for (auto& statement : this->root->body) {
			std::cout << statement->to_string() << std::endl;
		}*/
		root->accept(&optimizer);
		return optimizer.result();
	}
}
*/

// .h
/*
#pragma once

#include "./ast/ir/abstract_visitor_pattern.hpp"
#include "./ast/ir/node.hpp"
#include "deserializer_helper.hpp"

namespace deobf::ironbrew_devirtualizer::symbolic_execution::deserializer {
	using namespace ast;

	struct deserializer_visitor;

	// couldv'e done it via ordering deserializer steps (marking steps & switch case like in aztupbrew), but i'd rather symbolic executing so we would have to deal with the same thing on other forks that use junk code.

	struct symoblic_deserializer final {
		std::unique_ptr<vm_arch::proto> deserialize();

		explicit symoblic_deserializer(ir::statement::statement* const root, std::string_view vm_string, const unsigned char xor_key) :
			root(static_cast<ir::statement::block* const>(root)),
			deserializer_helper_object(std::make_unique<deserializer::deserializer_helper>(vm_string, xor_key))
		{ }

	private:

		friend struct deserializer_visitor;

		std::unique_ptr<deserializer::deserializer_helper> deserializer_helper_object; // composition over inheritance

		ir::statement::block* const root;
	};
}
*/